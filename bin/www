#!/usr/bin/env node


/**
 * Module dependencies.
 */
var app = require('../app'),
    debug = require('debug')('awfulpicks:server'),
    http = require('http'),
    
    port,
    server;


/**
 * Normalize a port into a number, string, or false.
 *
 * @param {int} val - the port to normalize
 *
 * @return {int|String|Boolean} the normalized port
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        return val;
    }

    if (port >= 0) {
        return port;
    }

    return false;
}

port = normalizePort(process.env.PORT || '3000');


/**
 * Get port from environment and store in Express.
 */
app.set('port', port);


/**
 * Create HTTP server.
 */
server = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);


/**
 * Event listener for HTTP server "error" event.
 *
 * @param {Object} error - the server error
 *
 * @throws unmanaged errors
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // Handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
            
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
            
        default:
            throw error;
    }
}


/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address(),
    bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    
    debug('Listening on ' + bind);
}


/**
 * Add our error listening.
 */
server.on('error', onError);
server.on('listening', onListening);
